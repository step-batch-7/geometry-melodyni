* read code & refactor

r = new Rectangle({x:1,y:1},{x:5,y:4})// creates a rectangle given the coordinates of its diagonal
r.toString() // "[Rectangle (1,1) to (2,3)]"
r.area // gives the area of rectangle
r.perimeter // gives the perimeter of the rectangle
r1.isEqualTo(r2) //is true if both rectangles are on same coordinates


 c.covers(p) // is true if point p is inside circle c


---done--- c.moveTo({x:1,y:1}) // creates a new circle of same dimensions at 1,

---done--- p.isOn(c) // is true if point p is on circle c
---done---c.hasPoint(p) // is true if circle c has point p on it

---done--- p.isOn(a) // is true if point p is on line a
---done--- new Circle({x:0,y:0},5) // creates a circle of radius 5 at 0,0
---done--- c.toString() // [Circle @(1,2) radius 5]
---done--- c1.isEqualTo(c2) // is true if both circles are at same location & are of same size (edited) 
---done--- c.area // gives the area of circle
---done--- c.perimeter // gives the perimeter of circle
---done--- a.findPointFromEnd(2) // finds a point at a distance of 2 from the start of line a
---done--- add test for condition if distance exceeds length of line
---done--- add test for condition if distance is in negative;
---done--- a.findPointFromStart(2) // finds a point at a distance of 2 from the start of line a
---done--- add test for condition if distance exceeds length of line
---done--- add test for condition if distance is in negative;  
---done--- remove common logic of findPointFromEnd & findPointFromStart into functions
---done--- change line length property according to point's findDistanceTo
---done--- p1.findDistanceTo(p2) //gives distance between points p1 & p2
---done--- a.andsParallelTo(b);//is true if line a is parallel to line b
---done--- //findX & findY give NaN when outside the Line Segment
---done--- a.hasPoint(p) // is true if point p is on the line a
---done--- a.split() // gives 2 lines split exactly at the centre of line a
---done--- p.visit((x,y)=>x+y) // gives 5  
---done--- p.visit((x,y)=>x*y) // gives 6
---done--- p.clone() // gives a copy of point p
---done--- p1.isEqualTo(p2) //is true if points p1 and p2 are on same x,y coordinates
---done--- a.isEqualTo(b) //is true if line a and line b have same end points
---done--- a.toString() // "[Line (1,2) to (2,3)]"
---done--- p.toString(); // "[Point @(2,3)]"
---done--- p = new Point(2,3)// creates a point at 2,3
---done--- y = a.findY(4); //finds y for a given x on the line
---done--- x = a.findX(8) //finds x for a given y on the line
---done--- write test for isEqualTo method of class Line;
---done--- write test for toString method of class Line;
---done--- update constructor
---done--- change data structure
---done--- modify variable names
---done--- modify isEqualTo
---done--- extract logic into smaller functions 
